
Grammar
rule 1    program ->		/* empty */
rule 2    program -> program stmt
rule 3    stmt -> IF expr NEWLINE stmt ELSE NEWLINE stmt
rule 4    stmt -> ID '=' NUM NEWLINE
rule 5    expr -> ID '>' NUM

Terminals, with rules where they appear

$ (-1)
'=' (61) 4
'>' (62) 5
error (256)
IF (258) 3
ELSE (259) 3
ID (260) 4 5
NUM (261) 4 5
NEWLINE (262) 3 4

Nonterminals, with rules where they appear

program (10)
    on left: 1 2, on right: 2
stmt (11)
    on left: 3 4, on right: 2 3
expr (12)
    on left: 5, on right: 3


state 0

    $default	reduce using rule 1 (program)

    program	go to state 1



state 1

    program  ->  program . stmt   (rule 2)

    $   	go to state 17
    IF  	shift, and go to state 2
    ID  	shift, and go to state 3

    stmt	go to state 4



state 2

    stmt  ->  IF . expr NEWLINE stmt ELSE NEWLINE stmt   (rule 3)

    ID  	shift, and go to state 5

    expr	go to state 6



state 3

    stmt  ->  ID . '=' NUM NEWLINE   (rule 4)

    '=' 	shift, and go to state 7



state 4

    program  ->  program stmt .   (rule 2)

    $default	reduce using rule 2 (program)



state 5

    expr  ->  ID . '>' NUM   (rule 5)

    '>' 	shift, and go to state 8



state 6

    stmt  ->  IF expr . NEWLINE stmt ELSE NEWLINE stmt   (rule 3)

    NEWLINE	shift, and go to state 9



state 7

    stmt  ->  ID '=' . NUM NEWLINE   (rule 4)

    NUM 	shift, and go to state 10



state 8

    expr  ->  ID '>' . NUM   (rule 5)

    NUM 	shift, and go to state 11



state 9

    stmt  ->  IF expr NEWLINE . stmt ELSE NEWLINE stmt   (rule 3)

    IF  	shift, and go to state 2
    ID  	shift, and go to state 3

    stmt	go to state 12



state 10

    stmt  ->  ID '=' NUM . NEWLINE   (rule 4)

    NEWLINE	shift, and go to state 13



state 11

    expr  ->  ID '>' NUM .   (rule 5)

    $default	reduce using rule 5 (expr)



state 12

    stmt  ->  IF expr NEWLINE stmt . ELSE NEWLINE stmt   (rule 3)

    ELSE	shift, and go to state 14



state 13

    stmt  ->  ID '=' NUM NEWLINE .   (rule 4)

    $default	reduce using rule 4 (stmt)



state 14

    stmt  ->  IF expr NEWLINE stmt ELSE . NEWLINE stmt   (rule 3)

    NEWLINE	shift, and go to state 15



state 15

    stmt  ->  IF expr NEWLINE stmt ELSE NEWLINE . stmt   (rule 3)

    IF  	shift, and go to state 2
    ID  	shift, and go to state 3

    stmt	go to state 16



state 16

    stmt  ->  IF expr NEWLINE stmt ELSE NEWLINE stmt .   (rule 3)

    $default	reduce using rule 3 (stmt)



state 17

    $   	go to state 18



state 18

    $default	accept
